/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cryptography;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author matthewbelgre
 */
public class CryptographyGUI extends javax.swing.JFrame {

    public SecretKey secretKey;
    public SecretKey AESsecretKey;
    public DataEncryptionStandard data1 = new DataEncryptionStandard();
    public AdvancedEncryptionStandard data2 = new AdvancedEncryptionStandard();
    public OneTimePadCipher otp;
    public int vernamKey[];
    public RSA rsa = new RSA();
    ButtonGroup buttons = new ButtonGroup();
    AffineCipher aff;

    public CryptographyGUI() {
        LanguageDetector l = new LanguageDetector();
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        plaintext = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        decrypt = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        caesar = new javax.swing.JRadioButton();
        vigenere = new javax.swing.JRadioButton();
        vernam = new javax.swing.JRadioButton();
        DES = new javax.swing.JRadioButton();
        DESgenerate = new javax.swing.JButton();
        AES = new javax.swing.JRadioButton();
        AESgenerate = new javax.swing.JButton();
        RSA = new javax.swing.JRadioButton();
        RSAgenerate = new javax.swing.JButton();
        OTPButton = new javax.swing.JButton();
        affine = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AffineA = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        AffineB = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        caesarKey = new javax.swing.JTextField();
        vigenereKey = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        encrypt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        plaintext.setColumns(20);
        plaintext.setRows(5);
        jScrollPane1.setViewportView(plaintext);
        plaintext.setLineWrap(true);
        JPopupMenu popup = new JPopupMenu();
        JMenuItem item = new JMenuItem(new DefaultEditorKit.CutAction());
        item.setText("Cut");
        popup.add(item);
        item = new JMenuItem(new DefaultEditorKit.CopyAction());
        item.setText("Copy");
        popup.add(item);
        item = new JMenuItem(new DefaultEditorKit.PasteAction());
        item.setText("Paste");
        popup.add(item);
        plaintext.setComponentPopupMenu(popup);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 168, 634, 430));

        jLabel1.setText("Select encryption type");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 120, -1, -1));

        decrypt.setText("Decrypt");
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });
        getContentPane().add(decrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, -1, -1));

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 610, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(123, 0, -1, -1));

        caesar.setText("Caesar Cipher (must use a whole number)");

        vigenere.setText("Vigenere Cipher (Key must be a written word E.g. SECRET)");

        vernam.setText("One time pad");

        DES.setText("Data Encryption Standard(DES)");

        DESgenerate.setText("Generate Key");
        DESgenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DESgenerateActionPerformed(evt);
            }
        });

        AES.setText("Advanced Encryption Standard");

        AESgenerate.setText("Generate Key");
        AESgenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AESgenerateActionPerformed(evt);
            }
        });

        RSA.setText("RSA");

        RSAgenerate.setText("Generate Key");
        RSAgenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RSAgenerateActionPerformed(evt);
            }
        });

        OTPButton.setText("Generate Key");
        OTPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OTPButtonActionPerformed(evt);
            }
        });

        affine.setText("Affine Cipher");

        jLabel2.setText("Enter key a, b such that a, b are coprime");

        jLabel3.setText("a:");

        AffineA.setText(null);

        jLabel6.setText("b:");

        AffineB.setText(null);

        jLabel7.setText("Enter key: ");

        jLabel8.setText("Enter key: ");

        caesarKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caesarKeyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vigenereKey, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DESgenerate)
                    .addComponent(DES)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RSA)
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AESgenerate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RSAgenerate, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(OTPButton)
                    .addComponent(AES))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vigenere)
                    .addComponent(vernam)
                    .addComponent(caesar, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(affine)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(caesarKey, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AffineA, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AffineB, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 79, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(caesar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caesarKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(affine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AffineA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(AffineB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vigenere)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(vigenereKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vernam)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OTPButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DES)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DESgenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AES)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(RSA)
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(AESgenerate)
                        .addGap(18, 18, 18)
                        .addComponent(RSAgenerate)
                        .addGap(17, 17, 17))))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 168, 470, 470));
        buttons.add(caesar);
        buttons.add(affine);
        buttons.add(vigenere);
        buttons.add(vernam);
        buttons.add(DES);
        buttons.add(AES);
        buttons.add(RSA);

        jLabel4.setText("Key: ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 94, -1, -1));

        key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyActionPerformed(evt);
            }
        });
        getContentPane().add(key, new org.netbeans.lib.awtextra.AbsoluteConstraints(678, 89, 568, -1));

        jLabel5.setText("Enter text below");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 133, 349, -1));

        encrypt.setText("Encrypt");
        encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptActionPerformed(evt);
            }
        });
        getContentPane().add(encrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 610, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptActionPerformed
        if (caesar.isSelected()) {
            String k = caesarKey.getText();
            if (k.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Empty key!!!! Please ensure a key has been entered under Caesar Cipher");
            } else {
                try {

                    int i = Integer.parseInt(k);
                    CaesarCipher c = new CaesarCipher(i);
                    String cipher = c.encrypt(plaintext.getText());
                    plaintext.setText(cipher);
                    key.setText("The key being used is: " + k);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Incorrect key!!!! Please enter a whole number containing no characters");
                }
            }
        } else if (affine.isSelected()) {
            if (AffineA.getText().isEmpty() || AffineB.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter key values for a and b under Affine Cipher!!!!");

            } else {
                try {
                    if (AffineCipher.findGCD(Integer.parseInt(AffineA.getText()), Integer.parseInt(AffineB.getText())) != 1) {
                        JOptionPane.showMessageDialog(null, "GCD must be 1!!!! Please use numbers a and b that are coprime");
                    } else {
                        aff = new AffineCipher(Integer.parseInt(AffineA.getText()), Integer.parseInt(AffineB.getText()));
                        String message = plaintext.getText();
                        String cipherText = aff.encrypt(message.toCharArray());
                        plaintext.setText(cipherText);

                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Incorrect key!!!! a and b must be a whole number");

                }
            }

        } else if (vigenere.isSelected()) {
            if (vigenereKey.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Empty key!!!! Please ensure a key has been entered under Vigenere Cipher");
            } else {
                String k = vigenereKey.getText();
                String message = plaintext.getText();
                VigenereCipher v = new VigenereCipher();
                String cipher = v.encrypt(message, k);
                plaintext.setText(cipher);
                key.setText("The key being used is: " + k);
            }
        } else if (vernam.isSelected()) {
            try {
                if (key.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please generate One Time Pad key!!!! A key must be generated with the button under One Time Pad");
                } else {
                    plaintext.setText(otp.encrypt(plaintext.getText()));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Empty Key!!!! Please generate a key");
            }
        } else if (DES.isSelected()) {
            if (key.getText().equals("DES key has been generated")) {

                try {
                    plaintext.setText(data1.encrypt(plaintext.getText(), secretKey));
                } catch (NoSuchPaddingException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeyException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalBlockSizeException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadPaddingException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please generate DES key!!!! A key must be generated with the button under Data Encryption standard");
            }

        } else if (AES.isSelected()) {
            if (key.getText().equals("Key has been generated")) {

                try {
                    plaintext.setText(data2.encrypt(plaintext.getText(), AESsecretKey));
                } catch (NoSuchPaddingException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeyException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalBlockSizeException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadPaddingException ex) {
                    Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please generate AES key!!!! A key must be generated with the button under Advanced Encryption standard");
            }

        } else if (RSA.isSelected()) {
            if (key.getText().equals("RSA key has been generated")) {
                // if(plaintext.getText() instanceof String){
                plaintext.setText(rsa.encryptMessage(plaintext.getText()).toString());
                //}

            } else {
                JOptionPane.showMessageDialog(null, "Please generate RSA key!!!! A key must be generated with the button under RSA");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ensure you have chosen an encryption method and that your enter text for encryption!");
        }

    }//GEN-LAST:event_encryptActionPerformed

    private void keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        plaintext.setText("");
        key.setText("");
        buttons.clearSelection();
        AffineA.setText("");
        AffineB.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        if (caesar.isSelected()) {
            String k = caesarKey.getText();
            if (k.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Empty key!!!! Please ensure a key has been entered under Caesar Cipher");
            } else {
                try {

                    int i = Integer.parseInt(k);
                    CaesarCipher c = new CaesarCipher(i);
                    String cipher = c.decrypt(plaintext.getText());
                    plaintext.setText(cipher);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Incorrect key!!!! Please enter a whole number with no characters");
                }
            }
        } else if (affine.isSelected()) {
            plaintext.setText(aff.decrypt(plaintext.getText()));
        } else if (vigenere.isSelected()) {

            String k = vigenereKey.getText();
            if (k.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Empty key!!!! Please ensure a key has been entered under Caesar Cipher");
            } else {
//if(Pattern.matches("[a-zA-Z]+", k)){
                String message = plaintext.getText();
                VigenereCipher v = new VigenereCipher();
                String cipher = v.decrypt(message, k);
                plaintext.setText(cipher);
//}else {
//JOptionPane.showMessageDialog(null, "Incorrect key!!!! Key must contain only charcaters");
//}
            }
        } else if (vernam.isSelected()) {
// otp = new OneTimePadCipher(vernamKey);
            plaintext.setText(otp.decrypt(plaintext.getText(), vernamKey));
        } else if (DES.isSelected()) {
            try {
                plaintext.setText(data1.decrypt(plaintext.getText(), secretKey));
            } catch (Exception ex) {
                Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (AES.isSelected()) {
            try {
                plaintext.setText(data2.decrypt(plaintext.getText(), AESsecretKey));
            } catch (NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException | UnsupportedEncodingException ex) {
                Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (RSA.isSelected()) {
            try {
                BigInteger cipher = new BigInteger(plaintext.getText());
                plaintext.setText(rsa.decryptMessage(cipher));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ensure the message you want to decrypt is a BigInteger");
            }
        }

    }//GEN-LAST:event_decryptActionPerformed

    private void DESgenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DESgenerateActionPerformed
        try {
            secretKey = KeyGenerator.getInstance("DES").generateKey();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        key.setText("DES key has been generated");
    }//GEN-LAST:event_DESgenerateActionPerformed

    private void AESgenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AESgenerateActionPerformed
        try {
            AESsecretKey = KeyGenerator.getInstance("AES").generateKey();

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CryptographyGUI.class.getName()).log(Level.SEVERE, null, ex);

        }
        key.setText("Key has been generated");    }//GEN-LAST:event_AESgenerateActionPerformed

    private void RSAgenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RSAgenerateActionPerformed
        rsa.generateKeys(2000);
        key.setText("RSA key has been generated");
    }//GEN-LAST:event_RSAgenerateActionPerformed

    private void OTPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OTPButtonActionPerformed
        if (plaintext.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "You must enter text to generate a key");
        } else {
            RandomSequenceGenerator r = new RandomSequenceGenerator();
            vernamKey = r.generate(plaintext.getText().length());
            otp = new OneTimePadCipher(vernamKey);
            this.key.setText(otp.getKeyString());
        }
    }//GEN-LAST:event_OTPButtonActionPerformed

    private void caesarKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caesarKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_caesarKeyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CryptographyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CryptographyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CryptographyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CryptographyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptographyGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AES;
    private javax.swing.JButton AESgenerate;
    private javax.swing.JTextField AffineA;
    private javax.swing.JTextField AffineB;
    private javax.swing.JRadioButton DES;
    private javax.swing.JButton DESgenerate;
    private javax.swing.JButton OTPButton;
    private javax.swing.JRadioButton RSA;
    private javax.swing.JButton RSAgenerate;
    private javax.swing.JRadioButton affine;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JRadioButton caesar;
    private javax.swing.JTextField caesarKey;
    private javax.swing.JButton clear;
    private javax.swing.JButton decrypt;
    private javax.swing.JButton encrypt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField key;
    private javax.swing.JTextArea plaintext;
    private javax.swing.JRadioButton vernam;
    private javax.swing.JRadioButton vigenere;
    private javax.swing.JTextField vigenereKey;
    // End of variables declaration//GEN-END:variables
}
